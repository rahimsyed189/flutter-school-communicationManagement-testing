import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_filex/open_filex.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:minio/minio.dart';
import 'fast_download_manager.dart';
import 'dart:io';
import 'dart:ui';
import 'package:http/http.dart' as http;
import 'package:background_downloader/background_downloader.dart';
import 'download_state.dart';
import 'widgets/r2_video_player.dart';
import 'widgets/download_all_overlay.dart';
import 'downloads_page.dart';
import 'multi_r2_uploader_page.dart';
import 'multi_r2_media_uploader_page.dart';

// Template styles for media display
enum MediaTemplateStyle {
  school,    // Blue to green gradient (default)
  business,  // Dark professional theme
  modern,    // Purple to pink gradient
}

class AnnouncementsPage extends StatefulWidget {
  final String currentUserId;
  final String currentUserRole;
  const AnnouncementsPage({Key? key, required this.currentUserId, required this.currentUserRole}) : super(key: key);

  @override
  State<AnnouncementsPage> createState() => _AnnouncementsPageState();
}

class _AnnouncementsPageState extends State<AnnouncementsPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  bool _preferInlinePlayback = true; // user preference

  // Download state per URL
  final Map<String, double?> _downloadProgress = {}; // 0..1 or null (indeterminate)
  final Map<String, String> _downloadedFile = {}; // url -> local path
  final Map<String, DownloadTask> _dlTask = {}; // url -> background task
  final Map<String, TaskStatus> _dlStatus = {}; // url -> task status

  // Selection mode (WhatsApp-like)
  bool _selectionActive = false;
  int? _selectedIndex;
  String? _selectedText;
  bool _selectedIsMine = false;
  DocumentReference? _selectedRef;
  OverlayEntry? _reactionsOverlay;
  bool _showFloatingPanel = false;
  bool _showAnnouncementForm = false;
  
  // Create a stable stream to prevent unnecessary rebuilds
  late final Stream<QuerySnapshot> _announcementsStream;

  Future<void> _setReaction(String emoji) async {
    final ref = _selectedRef;
    if (ref == null) return;
    try {
      await ref.update({'reactions.${widget.currentUserId}': emoji});
    } catch (e) {
      try {
        await ref.set({'reactions': {widget.currentUserId: emoji}}, SetOptions(merge: true));
      } catch (_) {}
    }
  }

  void _showReactionsOverlay(Offset globalPosition) {
    _removeReactionsOverlay();
    final overlay = Overlay.of(context);
    if (overlay == null) return;
  final media = MediaQuery.of(context);
  const margin = 12.0;
  const overlayWidth = 208.0; // Keep consistent with chat page
  final dx = globalPosition.dx;
  final dy = (globalPosition.dy - 56).clamp(kToolbarHeight + media.padding.top + margin, media.size.height - 120.0);
  final left = (dx - overlayWidth / 2).clamp(margin, media.size.width - margin - overlayWidth);
    _reactionsOverlay = OverlayEntry(
      builder: (_) => Positioned(
    left: left,
        top: dy - 48,
        child: Material(
          color: Colors.transparent,
          child: Container(
      width: overlayWidth,
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(24),
              boxShadow: const [BoxShadow(blurRadius: 6, color: Colors.black26)],
            ),
            child: FittedBox(
              fit: BoxFit.scaleDown,
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  for (final e in ['üëç','‚ù§Ô∏è','üòÇ','üòÆ','üò¢','üôè'])
                    InkWell(
                      onTap: () async {
                        await _setReaction(e);
                        _exitSelection();
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        child: Text(e, style: const TextStyle(fontSize: 20)),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
    overlay.insert(_reactionsOverlay!);
  }

  void _removeReactionsOverlay() {
    _reactionsOverlay?.remove();
    _reactionsOverlay = null;
  }

  void _enterSelection({
    required LongPressStartDetails details,
    required bool isMine,
    required String message,
    required DocumentReference ref,
    required int index,
  }) {
    setState(() {
      _selectionActive = true;
      _selectedIndex = index;
      _selectedIsMine = isMine;
      _selectedText = message;
      _selectedRef = ref;
    });
    _showReactionsOverlay(details.globalPosition);
  }

  void _exitSelection() {
    _removeReactionsOverlay();
    if (!_selectionActive) return;
    setState(() {
      _selectionActive = false;
      _selectedIndex = null;
      _selectedIsMine = false;
      _selectedText = null;
      _selectedRef = null;
    });
  }

  Future<String> _getSenderName(String senderId) async {
    if (senderId == 'firstadmin') return 'School Admin';
    final userDoc = await FirebaseFirestore.instance.collection('users').where('userId', isEqualTo: senderId).limit(1).get();
    if (userDoc.docs.isNotEmpty && userDoc.docs.first.data().containsKey('name')) {
      return userDoc.docs.first['name'] ?? senderId;
    }
    return senderId;
  }

  Future<void> _sendAnnouncement() async {
    final text = _messageController.text.trim();
    if (text.isEmpty) return;
    final senderName = await _getSenderName(widget.currentUserId);
    await FirebaseFirestore.instance.collection('communications').add({
      'message': text,
      'senderId': widget.currentUserId,
      'senderRole': widget.currentUserRole,
      'senderName': senderName,
      'timestamp': FieldValue.serverTimestamp(),
    });
    _messageController.clear();
    // Close form efficiently
    if (mounted) {
      setState(() {
        _showAnnouncementForm = false;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    _loadPlaybackPreference();
    _hydrateDownloads();
    _maybeRequestAndroidNotificationPermission();
    
    // Initialize stable stream to prevent rebuilds on setState
    _announcementsStream = FirebaseFirestore.instance
        .collection('communications')
        .orderBy('timestamp', descending: false)
        .snapshots();
  }

  Future<void> _maybeRequestAndroidNotificationPermission() async {
    try {
      if (Platform.isAndroid) {
        await Permission.notification.request();
      }
    } catch (_) {}
  }

  Future<void> _loadPlaybackPreference() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _preferInlinePlayback = prefs.getBool('announcements_prefer_inline') ?? true;
      });
    } catch (_) {}
  }

  // Helper to convert string to MediaTemplateStyle enum
  MediaTemplateStyle _getTemplateStyleFromString(String? styleString) {
    switch (styleString?.toLowerCase()) {
      case 'business':
        return MediaTemplateStyle.business;
      case 'modern':
        return MediaTemplateStyle.modern;
      case 'school':
      default:
        return MediaTemplateStyle.school;
    }
  }

  Future<void> _hydrateDownloads() async {
    final saved = await DownloadState.load();
    if (!mounted) return;
    if (saved.isEmpty) return;
    setState(() {
      _downloadedFile.addAll(saved);
    });
  }

  Future<void> _togglePlaybackPreference(bool value) async {
    setState(() => _preferInlinePlayback = value);
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('announcements_prefer_inline', value);
    } catch (_) {}
  }

  // Extract YouTube videoId from known URL shapes
  String? _extractYouTubeId(String raw) {
    try {
      final url = raw.trim();
      if (url.isEmpty) return null;
      final uri = Uri.parse(url);
      if (uri.host.contains('youtu.be')) {
        return uri.pathSegments.isNotEmpty ? uri.pathSegments.first : null;
      }
      if (uri.host.contains('youtube.com')) {
        if (uri.path == '/watch') {
          return uri.queryParameters['v'];
        }
        if (uri.pathSegments.length >= 2) {
          return uri.pathSegments[1];
        }
      }
    } catch (_) {}
    return null;
  }

  Future<void> _openExternally(String url) async {
    final uri = Uri.parse(url);
    if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
      await launchUrl(uri, mode: LaunchMode.inAppBrowserView);
    }
  }

  Future<void> _downloadAndOpenWithDevicePlayer(String url) async {
    try {
      ScaffoldMessenger.of(context).hideCurrentSnackBar();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Downloading video‚Ä¶'), duration: Duration(seconds: 1)),
      );
      final tempDir = await getTemporaryDirectory();
      final fileName = 'video_${DateTime.now().millisecondsSinceEpoch}.mp4';
      final filePath = '${tempDir.path}/$fileName';
      final resp = await http.get(Uri.parse(url));
      if (resp.statusCode == 200) {
        final f = File(filePath);
        await f.writeAsBytes(resp.bodyBytes);
        if (!mounted) return;
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Saved to ${f.path}'), duration: const Duration(seconds: 2)),
        );
        await OpenFilex.open(f.path);
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).hideCurrentSnackBar();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Download failed, opening externally')),
          );
        }
        await _openExternally(url);
      }
    } catch (_) {
      if (mounted) {
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Download failed, opening externally')),
        );
      }
      await _openExternally(url);
    }
  }

  // Background download with persistence, progress; save to shared Downloads on Android after completion
  Future<void> _startDownload(String url) async {
    if (_downloadedFile.containsKey(url) || _downloadProgress.containsKey(url)) return;
    final filename = 'video_${DateTime.now().millisecondsSinceEpoch}.mp4';
    final task = DownloadTask(
      url: url,
      filename: filename,
      baseDirectory: BaseDirectory.applicationDocuments,
      updates: Updates.statusAndProgress,
      allowPause: true,
    );
    setState(() {
      _dlTask[url] = task;
      _dlStatus[url] = TaskStatus.enqueued;
      _downloadProgress[url] = 0.0;
    });
    FileDownloader().download(
      task,
      onProgress: (progress) {
        if (!mounted) return;
        setState(() => _downloadProgress[url] = progress);
      },
      onStatus: (status) async {
        if (!mounted) return;
        setState(() => _dlStatus[url] = status);
        if (status == TaskStatus.complete) {
          String? movedPath;
          try {
            if (Platform.isAndroid) {
              movedPath = await FileDownloader().moveToSharedStorage(task, SharedStorage.downloads);
            }
          } catch (_) {}
          final path = movedPath ?? await task.filePath();
          setState(() {
            _downloadProgress.remove(url);
            _downloadedFile[url] = path;
          });
          // persist mapping
          DownloadState.put(url, path);
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Saved to $path')));
          }
        } else if (status == TaskStatus.failed || status == TaskStatus.canceled) {
          setState(() {
            _downloadProgress.remove(url);
            _dlTask.remove(url);
          });
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Download failed')));
          }
        }
      },
    );
  }

  Future<void> _togglePauseResume(String url) async {
    final task = _dlTask[url];
    if (task == null) return;
    final status = _dlStatus[url];
    try {
      if (status == TaskStatus.running) {
        await FileDownloader().pause(task);
      } else if (status == TaskStatus.paused) {
        await FileDownloader().resume(task);
      }
    } catch (_) {}
  }

  Future<void> _cancelDownload(String url) async {
    final task = _dlTask[url];
    if (task == null) return;
    try {
      await FileDownloader().cancelTasksWithIds([task.taskId]);
    } catch (_) {}
  }

  bool _isShortsUrl(String url) {
    try {
      final uri = Uri.parse(url.trim());
      if (!uri.host.contains('youtube.com')) return url.contains('/shorts/');
      final segs = uri.pathSegments;
      return segs.isNotEmpty && segs.first == 'shorts';
    } catch (_) {
      return url.contains('/shorts/');
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (_selectionActive) {
          _exitSelection();
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: AppBar(
          title: _selectionActive ? const Text('1 selected') : const Text('Announcements'),
          leading: _selectionActive ? IconButton(icon: const Icon(Icons.close), onPressed: _exitSelection) : null,
          actions: [
            if (_selectionActive)
              PopupMenuButton<String>(
                onSelected: (v) async {
                  if (v == 'copy') {
                    if (_selectedText != null) {
                      await Clipboard.setData(ClipboardData(text: _selectedText!));
                      if (mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Copied')));
                      }
                    }
                    _exitSelection();
                  } else if (v == 'delete' && _selectedIsMine) {
                    final ref = _selectedRef;
                    if (ref != null) {
                      try { await ref.delete(); } catch (_) {}
                    }
                    _exitSelection();
                  }
                },
                itemBuilder: (ctx) => [
                  const PopupMenuItem(value: 'copy', child: Text('Copy')),
                  if (_selectedIsMine) const PopupMenuItem(value: 'delete', child: Text('Delete')),
                ],
              )
            else ...[
              Row(
                children: [
                  const Text('Play inline', style: TextStyle(fontSize: 12)),
                  Switch(
                    value: _preferInlinePlayback,
                    onChanged: (v) => _togglePlaybackPreference(v),
                  ),
                ],
              ),
              // For all users, allow quick navigation to Current Page (which lists their groups)
              IconButton(
                tooltip: 'Current Page',
                icon: const Icon(Icons.home_outlined),
                onPressed: () => Navigator.pushNamed(context, '/admin', arguments: {'userId': widget.currentUserId, 'role': widget.currentUserRole}),
              ),
              if (widget.currentUserRole == 'admin')
                IconButton(
                  icon: const Icon(Icons.group_add),
                  onPressed: () => Navigator.pushNamed(context, '/groups/new', arguments: {'userId': widget.currentUserId}),
                ),
              PopupMenuButton<String>(
                onSelected: (value) async {
                  if (value == 'profile') {
                    final prefs = await SharedPreferences.getInstance();
                    final name = prefs.getString('session_name') ?? '';
                    final role = prefs.getString('session_role') ?? 'user';
                    if (!mounted) return;
                    showDialog(
                      context: context,
                      builder: (_) => AlertDialog(
                        title: const Text('Profile'),
                        content: Column(
                          mainAxisSize: MainAxisSize.min,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('User ID: ${widget.currentUserId}'),
                            Text('Name: ${name.isEmpty ? '(unset)' : name}'),
                            Text('Role: $role'),
                          ],
                        ),
                        actions: [
                          TextButton(onPressed: () => Navigator.pop(context), child: const Text('Close')),
                        ],
                      ),
                    );
                  } else if (value == 'signout') {
                    final prefs = await SharedPreferences.getInstance();
                    await prefs.remove('session_userId');
                    await prefs.remove('session_role');
                    await prefs.remove('session_name');
                    if (!context.mounted) return;
                    Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
                  }
                },
                itemBuilder: (context) => const [
                  PopupMenuItem(value: 'profile', child: Text('Profile')),
                  PopupMenuItem(value: 'signout', child: Text('Sign out')),
                ],
              ),
            ],
          ],
        ),
        body: Stack(
          children: [
            Column(
              children: [
                Expanded(
                  child: StreamBuilder<QuerySnapshot>(
                    stream: _announcementsStream,
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  }
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  final docs = snapshot.data?.docs ?? [];
                  if (docs.isEmpty) {
                    return const Center(child: Text('No announcements yet.'));
                  }
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    if (_scrollController.hasClients) {
                      _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
                    }
                  });
                  final bottomPad = 96.0 + MediaQuery.of(context).padding.bottom;
                  return ListView.builder(
                    controller: _scrollController,
                    padding: EdgeInsets.fromLTRB(8, 8, 8, bottomPad),
                    itemCount: docs.length,
                    itemBuilder: (context, index) {
                      final data = docs[index].data() as Map<String, dynamic>;
                      final isAdmin = data['senderRole'] == 'admin';
                      final senderId = (data['senderId'] ?? '').toString();
                      final senderName = data['senderName'];
                      final ts = data['timestamp'];
                      DateTime? time;
                      if (ts is Timestamp) time = ts.toDate();
                      final timeStr = time != null ? TimeOfDay.fromDateTime(time).format(context) : '';
                      final isMine = senderId == widget.currentUserId;

                      // Day header when date changes
                      Widget? dayHeader;
                      if (time != null) {
                        final prevTs = index > 0 ? (docs[index - 1].data() as Map<String, dynamic>)['timestamp'] : null;
                        DateTime? prevTime;
                        if (prevTs is Timestamp) prevTime = prevTs.toDate();
                        final needHeader = prevTime == null ||
                            DateTime(prevTime.year, prevTime.month, prevTime.day) !=
                                DateTime(time.year, time.month, time.day);
                        if (needHeader) {
                          final now = DateTime.now();
                          final today = DateTime(now.year, now.month, now.day);
                          final that = DateTime(time.year, time.month, time.day);
                          final diff = that.difference(today).inDays;
                          final label = diff == 0
                              ? 'Today'
                              : diff == -1
                                  ? 'Yesterday'
                                  : '${that.day.toString().padLeft(2, '0')}/${that.month.toString().padLeft(2, '0')}/${that.year}';
                          dayHeader = Center(
                            child: Container(
                              margin: const EdgeInsets.symmetric(vertical: 6),
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                              decoration: BoxDecoration(color: Colors.black12, borderRadius: BorderRadius.circular(12)),
                              child: Text(label, style: const TextStyle(fontSize: 12, color: Colors.black87)),
                            ),
                          );
                        }
                      }

                      final ref = docs[index].reference;
                      final isSelected = _selectionActive && _selectedIndex == index;
                      final reactions = (data['reactions'] as Map<String, dynamic>?) ?? const {};
                      final Map<String, int> reactionCounts = {};
                      reactions.values.forEach((val) {
                        final emo = val?.toString() ?? '';
                        if (emo.isEmpty) return;
                        reactionCounts[emo] = (reactionCounts[emo] ?? 0) + 1;
                      });
            final bubble = FutureBuilder<String>(
                        future: senderName == null || (senderName is String && senderName.isEmpty)
                            ? _getSenderName(senderId)
                            : Future.value(senderName as String),
                        builder: (context, nameSnapshot) {
                          final resolvedName = nameSnapshot.data ?? (isAdmin ? 'School Admin' : senderId);
              final msg = (data['message'] ?? '').toString();
                      final isYouTube = (data['type'] == 'youtube') || msg.contains('youtu');
                      final isFirebaseVideo = (data['type'] == 'firebase') && msg.startsWith('http');
                      final isR2Video = (data['type'] == 'r2');
                      // Check for both traditional r2-multi (videos field) and the new mixed media format (media field)
                      final isR2Multi = (data['type'] == 'r2-multi' && data['videos'] is List && (data['videos'] as List).isNotEmpty) ||
                                       ((data['type'] == 'r2-multi-video' || data['type'] == 'r2-multi-image' || data['type'] == 'r2-multi-media') && 
                                       data['media'] is List && (data['media'] as List).isNotEmpty);
              final videoId = (data['videoId'] ?? '') as String? ?? _extractYouTubeId(msg) ?? '';
              final thumb = (data['thumbnailUrl'] ?? '') as String? ?? (videoId.isNotEmpty
                ? 'https://img.youtube.com/vi/$videoId/hqdefault.jpg'
                : '');
              final title = (data['title'] ?? '') as String? ?? '';
              final desc = (data['description'] ?? '') as String? ?? '';
              final meta = (data['meta'] as Map<String, dynamic>?) ?? const {};
              final metaW = (meta['width'] as num?)?.toDouble() ?? 0;
              final metaH = (meta['height'] as num?)?.toDouble() ?? 0;
              final metaAspect = (meta['aspect'] as num?)?.toDouble();
              final effectiveAspect = () {
                if (metaAspect != null && metaAspect > 0) return metaAspect;
                if (metaW > 0 && metaH > 0) return metaW / metaH;
                return null;
              }();
                          final url = msg;
              // Decide layout: if we have meta aspect, use it; otherwise fall back to URL shorts check
              final isShorts = effectiveAspect != null
                  ? (effectiveAspect < 1.0) // vertical video treated like shorts-style card
                  : _isShortsUrl(url);

                          // Special handling for media announcements - show only template-styled media
                          if (isR2Multi) {
                            return Container(
                              margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                              child: _R2MultiVideoGrid(
                                videos: data['videos'] is List ? 
                                  List<Map<String, dynamic>>.from(data['videos'] as List) : 
                                  List<Map<String, dynamic>>.from(data['media'] as List),
                                templateStyle: _getTemplateStyleFromString(data['templateStyle'] as String?),
                                onOpenVideo: (url) async {
                                  if (_preferInlinePlayback) {
                                    // In inline mode, open fullscreen R2 player
                                    await Navigator.of(context).push(
                                      MaterialPageRoute(
                                        builder: (ctx) => _FullScreenR2VideoPage(
                                          videoId: '',
                                          videoData: {'url': url},
                                        ),
                                      ),
                                    );
                                  } else {
                                    // External playback
                                    await _openExternally(url);
                                  }
                                },
                              ),
                            );
                          }

                          // Regular text announcements - centered, white, full-width
                          return Container(
                            margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 16),
                            child: GestureDetector(
                              onLongPressStart: (details) {
                                _enterSelection(
                                  details: details,
                                  isMine: isMine,
                                  message: msg,
                                  ref: ref,
                                  index: index,
                                );
                              },
                              child: Container(
                                width: double.infinity,
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  color: isSelected
                                    ? Colors.blue[50]
                                    : Colors.white,
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: isSelected 
                                      ? Colors.blue[200]! 
                                      : Colors.grey[200]!,
                                    width: 1,
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.05),
                                      blurRadius: 8,
                                      offset: const Offset(0, 2),
                                    ),
                                  ],
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Row(
                                      children: [
                                        CircleAvatar(
                                          radius: 16,
                                          backgroundColor: isAdmin ? Colors.blue[100] : Colors.grey[100],
                                          child: Icon(
                                            isAdmin ? Icons.admin_panel_settings : Icons.person,
                                            size: 16,
                                            color: isAdmin ? Colors.blue[700] : Colors.grey[600],
                                          ),
                                        ),
                                        const SizedBox(width: 12),
                                        Expanded(
                                          child: Column(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                resolvedName,
                                                style: TextStyle(
                                                  fontWeight: FontWeight.w600,
                                                  color: isAdmin ? Colors.blue[800] : Colors.grey[800],
                                                  fontSize: 14,
                                                ),
                                              ),
                                              Text(
                                                isAdmin ? 'Administrator' : 'User',
                                                style: TextStyle(
                                                  color: Colors.grey[500],
                                                  fontSize: 12,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        Text(
                                          ts is Timestamp ? ts.toDate().toString().substring(5, 16) : '',
                                          style: TextStyle(
                                            color: Colors.grey[400],
                                            fontSize: 12,
                                          ),
                                        ),
                                      ],
                                    ),
                                    const SizedBox(height: 12),
                                    if (!isYouTube && !isFirebaseVideo && !isR2Video && !isR2Multi)
                                      SelectableText(
                                        msg,
                                        style: const TextStyle(
                                          fontSize: 16, 
                                          height: 1.4,
                                          color: Colors.black87,
                                        ),
                                      ),
                                    if (isYouTube || isFirebaseVideo || isR2Video || isR2Multi) ...[
                                        // YouTube card
                                        if (isYouTube && thumb.isNotEmpty)
                                          AspectRatio(
                                            aspectRatio: () {
                                              if (effectiveAspect != null && effectiveAspect > 0) {
                                                return effectiveAspect;
                                              }
                                              return isShorts ? 9 / 16 : 16 / 9;
                                            }(),
                                            child: Stack(
                                              children: [
                                                Positioned.fill(
                                                  child: Image.network(
                                                    thumb,
                                                    fit: BoxFit.cover,
                                                    errorBuilder: (c, e, s) => const ColoredBox(
                                                      color: Colors.black12,
                                                      child: Center(child: Icon(Icons.image_not_supported_outlined)),
                                                    ),
                                                  ),
                                                ),
                                                const Positioned.fill(
                                                  child: IgnorePointer(
                                                    ignoring: true,
                                                    child: Center(
                                                      child: Icon(Icons.play_circle_fill, size: 56, color: Colors.white70),
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        // R2 videos handled below via inline overlay or ListTile; avoid duplicate blocks
                                        if (isFirebaseVideo && _preferInlinePlayback)
                                          Padding(
                                            padding: const EdgeInsets.only(top: 6, bottom: 4),
                                            child: Container(
                                              height: 200,
                                              decoration: BoxDecoration(
                                                color: Colors.grey[300],
                                                borderRadius: BorderRadius.circular(8),
                                              ),
                                              child: const Center(
                                                child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.center,
                                                  children: [
                                                    Icon(Icons.videocam_off, size: 48, color: Colors.grey),
                                                    SizedBox(height: 8),
                                                    Text('Firebase videos not supported', style: TextStyle(color: Colors.grey)),
                                                  ],
                                                ),
                                              ),
                                            ),
                                          ),
                                        if (isR2Video && _preferInlinePlayback)
                                          Padding(
                                            padding: const EdgeInsets.only(top: 6, bottom: 4),
                                            child: _R2VideoThumbnail(
                                              videoData: data,
                                              width: metaW > 0 ? metaW : 350,
                                              height: metaH > 0 ? metaH : 200,
                                              aspectRatio: effectiveAspect,
                                              isShorts: isShorts,
                                              onOpenExternally: _openExternally,
                                            ),
                                          ),
                                        if (!isFirebaseVideo && !isR2Video && !_preferInlinePlayback)
                                        ListTile(
                                          contentPadding: const EdgeInsets.symmetric(horizontal: 0),
                                          title: Text(
                                            title.isNotEmpty ? title : 'Video',
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                          subtitle: Text(
                                            desc.isNotEmpty ? desc : url,
                                            maxLines: 2,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                          leading: () {
                                            final poster = (data['thumbnailUrl'] as String?) ?? (meta['thumbnailUrl'] as String?);
                                            if (poster != null && poster.isNotEmpty) {
                                              return ClipRRect(
                                                borderRadius: BorderRadius.circular(6),
                                                child: SizedBox(
                                                  width: 56,
                                                  height: 36,
                                                  child: _R2PosterImage(url: poster, fit: BoxFit.cover),
                                                ),
                                              );
                                            }
                                            return null;
                                          }(),
                                          trailing: Row(
                                            mainAxisSize: MainAxisSize.min,
                                            children: [
                                              IconButton(
                                                icon: Icon(_preferInlinePlayback ? Icons.play_circle_fill : Icons.open_in_new),
                                                tooltip: isYouTube
                                                    ? (_preferInlinePlayback ? 'Play inline' : 'Open in YouTube')
                                                    : isR2Video
                                                    ? (_preferInlinePlayback ? 'Play inline' : 'Open R2 video')
                                                    : (_preferInlinePlayback ? 'Play inline' : 'Open externally'),
                                                onPressed: () async {
                          if (!_preferInlinePlayback) {
                                                    if (isFirebaseVideo) {
                                                      final saved = _downloadedFile[url];
                                                      if (saved != null) {
                                                        await OpenFilex.open(saved);
                                                      } else if (!_downloadProgress.containsKey(url)) {
                                                        await _startDownload(url);
                                                      }
                                                    } else if (isR2Video) {
                            // Download (temp) then open with device player
                            final videoUrl = data['url'] ?? url;
                            await _downloadAndOpenWithDevicePlayer(videoUrl);
                                                    } else if (isR2Multi) {
                                                      // Open downloads list if any; otherwise no-op
                                                      if (!context.mounted) return;
                                                      await Navigator.of(context).push(
                                                        MaterialPageRoute(builder: (_) => const DownloadsPage()),
                                                      );
                                                    } else {
                                                      await _openExternally(url);
                                                    }
                                                    return;
                                                  }
                                                  if (isYouTube) {
                                                    if (videoId.isEmpty) {
                                                      await _openExternally(url);
                                                      return;
                                                    }
                                                    if (!context.mounted) return;
                                                    await Navigator.of(context).push(
                                                      MaterialPageRoute(
                                                        builder: (ctx) => _FullScreenYouTubePage(
                                                          videoId: videoId,
                                                          url: url,
                                                          isShorts: isShorts,
                                                          aspect: effectiveAspect,
                                                        ),
                                                      ),
                                                    );
                                                  } else if (isFirebaseVideo) {
                                                    // Show message that Firebase videos are not supported
                                                    ScaffoldMessenger.of(context).showSnackBar(
                                                      const SnackBar(content: Text('Firebase videos are not supported')),
                                                    );
                                                  } else if (isR2Video) {
                                                    // For R2 videos, open in fullscreen player
                                                    if (!context.mounted) return;
                                                    
                                                    final videoId = data['id'] as String? ?? '';
                                                    final videoUrl = data['url'] as String? ?? '';
                                                    
                                                    // Check if we have valid video data
                                                    if (videoId.isEmpty && videoUrl.isEmpty) {
                                                      ScaffoldMessenger.of(context).showSnackBar(
                                                        const SnackBar(content: Text('Video data is missing')),
                                                      );
                                                      return;
                                                    }
                                                    
                                                    await Navigator.of(context).push(
                                                      MaterialPageRoute(
                                                        builder: (ctx) => _FullScreenR2VideoPage(
                                                          videoId: videoId,
                                                          videoData: data,
                                                        ),
                                                      ),
                                                    );
                                                  }
                                                },
                                              ),
                                            ],
                                          ),
                                          onTap: () async {
                      if (!_preferInlinePlayback) {
                                              if (isFirebaseVideo) {
                                                final saved = _downloadedFile[url];
                                                if (saved != null) {
                                                  await OpenFilex.open(saved);
                                                } else if (!_downloadProgress.containsKey(url)) {
                                                  await _startDownload(url);
                                                }
                                              } else if (isR2Video) {
                        // Download (temp) then open with device player
                        final videoUrl = data['url'] ?? url;
                        await _downloadAndOpenWithDevicePlayer(videoUrl);
                                              } else {
                                                await _openExternally(url);
                                              }
                                              return;
                                            }
                                            if (isYouTube) {
                                              if (videoId.isEmpty) {
                                                await _openExternally(url);
                                                return;
                                              }
                                              if (!context.mounted) return;
                                              await Navigator.of(context).push(
                                                MaterialPageRoute(
                                                  builder: (ctx) => _FullScreenYouTubePage(
                                                    videoId: videoId,
                                                    url: url,
                                                    isShorts: isShorts,
                                                    aspect: effectiveAspect,
                                                  ),
                                                ),
                                              );
                                            } else if (isFirebaseVideo) {
                                              // Show message that Firebase videos are not supported
                                              ScaffoldMessenger.of(context).showSnackBar(
                                                const SnackBar(content: Text('Firebase videos are not supported')),
                                              );
                                            } else if (isR2Video) {
                                              // For R2 videos, open in fullscreen player
                                              if (!context.mounted) return;
                                              
                                              final videoId = data['id'] as String? ?? '';
                                              final videoUrl = data['url'] as String? ?? '';
                                              
                                              // Check if we have valid video data
                                              if (videoId.isEmpty && videoUrl.isEmpty) {
                                                ScaffoldMessenger.of(context).showSnackBar(
                                                  const SnackBar(content: Text('Video data is missing')),
                                                );
                                                return;
                                              }
                                              
                                              await Navigator.of(context).push(
                                                MaterialPageRoute(
                                                  builder: (ctx) => _FullScreenR2VideoPage(
                                                    videoId: videoId,
                                                    videoData: data,
                                                  ),
                                                ),
                                              );
                                            } else if (isR2Multi) {
                                              // Default tap for multi: open Downloads page or do nothing
                                              if (!context.mounted) return;
                                              await Navigator.of(context).push(
                                                MaterialPageRoute(builder: (_) => const DownloadsPage()),
                                              );
                                            }
                                          },
                                        ),
                                      ],
                                      const SizedBox(height: 4),
                                      Align(
                                        alignment: Alignment.center,
                                        child: Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Text(timeStr, style: const TextStyle(fontSize: 10, color: Colors.black54)),
                                          ],
                                        ),
                                      ),
                                      if (reactionCounts.isNotEmpty) ...[
                                        const SizedBox(height: 2),
                                        Align(
                                          alignment: Alignment.center,
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                            decoration: BoxDecoration(
                                              color: Colors.white,
                                              borderRadius: BorderRadius.circular(12),
                                              boxShadow: const [BoxShadow(blurRadius: 0.3, color: Colors.black12)],
                                            ),
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                for (final entry in reactionCounts.entries) ...[
                                                  Text(entry.key, style: const TextStyle(fontSize: 14)),
                                                  if (entry.value > 1)
                                                    Padding(
                                                      padding: const EdgeInsets.only(left: 2, right: 6),
                                                      child: Text('${entry.value}', style: const TextStyle(fontSize: 12, color: Colors.black54)),
                                                    )
                                                  else
                                                    const SizedBox(width: 6),
                                                ],
                                              ],
                                            ),
                                          ),
                                        ),
                                      ],
                                  ],
                                ),
                              ),
                            ),
                          );
                        },
                      );

                      if (dayHeader != null) {
                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [dayHeader!, bubble],
                        );
                      }
                      return bubble;
                    },
                  );
                },
              ),
            ),
            if (widget.currentUserRole == 'admin' && _showAnnouncementForm)
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    top: BorderSide(
                      color: Colors.grey[300]!,
                      width: 1,
                    ),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 10,
                      offset: const Offset(0, -2),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Create Announcement',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.grey[800],
                          ),
                        ),
                        IconButton(
                          onPressed: () {
                            setState(() {
                              _showAnnouncementForm = false;
                            });
                            _messageController.clear();
                          },
                          icon: Icon(
                            Icons.close,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          tooltip: 'Close',
                          constraints: const BoxConstraints(),
                          padding: EdgeInsets.zero,
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.grey[50],
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.grey[200]!),
                      ),
                      child: TextField(
                        controller: _messageController,
                        maxLines: 3,
                        decoration: const InputDecoration(
                          hintText: 'Write your announcement message...',
                          border: InputBorder.none,
                          contentPadding: EdgeInsets.all(16),
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),
                    Row(
                      children: [
                        // Attachment button
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.blue[50],
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.blue[200]!),
                          ),
                          child: IconButton(
                            icon: Icon(Icons.attach_file, color: Colors.blue[600]),
                            tooltip: 'Attach Media',
                            onPressed: () async {
                              showModalBottomSheet(
                                context: context,
                                showDragHandle: true,
                                builder: (ctx) => SafeArea(
                                  child: Column(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      const ListTile(title: Text('Attach'), subtitle: Text('Choose what to attach')),
                                      ListTile(
                                        leading: const CircleAvatar(backgroundColor: Colors.purple, child: Icon(Icons.attach_file, color: Colors.white)),
                                        title: const Text('Photos & Videos'),
                                        subtitle: const Text('Upload multiple media files together'),
                                        onTap: () {
                                          Navigator.pop(ctx);
                                          Navigator.of(context).push(
                                            MaterialPageRoute(
                                              builder: (_) => MultiR2MediaUploaderPage(
                                                currentUserId: widget.currentUserId,
                                                currentUserRole: widget.currentUserRole,
                                              ),
                                            ),
                                          );
                                        },
                                      ),
                                      ListTile(
                                        leading: const CircleAvatar(backgroundColor: Colors.teal, child: Icon(Icons.video_collection, color: Colors.white)),
                                        title: const Text('Videos Only'),
                                        subtitle: const Text('Upload multiple videos'),
                                        onTap: () {
                                          Navigator.pop(ctx);
                                          Navigator.of(context).push(
                                            MaterialPageRoute(
                                              builder: (_) => MultiR2UploaderPage(
                                                currentUserId: widget.currentUserId,
                                                currentUserRole: widget.currentUserRole,
                                              ),
                                            ),
                                          );
                                        },
                                      ),
                                      const SizedBox(height: 8),
                                    ],
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                        const Spacer(),
                        // Send button
                        Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [Colors.blue[400]!, Colors.blue[600]!],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ElevatedButton.icon(
                            icon: const Icon(Icons.send, color: Colors.white, size: 18),
                            label: const Text(
                              'Post',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              shadowColor: Colors.transparent,
                              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            onPressed: _sendAnnouncement,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
          // Floating Panel Overlay
          if (_showFloatingPanel)
            Positioned(
              right: 16,
              bottom: 100,
              child: Container(
                width: 280,
                height: 350,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      blurRadius: 10,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    // Header with close button
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue[50],
                        borderRadius: const BorderRadius.only(
                          topLeft: Radius.circular(16),
                          topRight: Radius.circular(16),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Quick Actions',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.blue[800],
                            ),
                          ),
                          IconButton(
                            icon: Icon(Icons.close, color: Colors.blue[800]),
                            onPressed: () {
                              setState(() {
                                _showFloatingPanel = false;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                    // Content
                    Expanded(
                      child: SingleChildScrollView(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            _buildQuickActionItem(
                              icon: Icons.announcement,
                              title: 'Create Announcement',
                              subtitle: 'Post new announcement',
                              onTap: () {
                                setState(() {
                                  _showFloatingPanel = false;
                                  _showAnnouncementForm = true;
                                });
                              },
                            ),
                            const SizedBox(height: 12),
                            _buildQuickActionItem(
                              icon: Icons.attach_file,
                              title: 'Upload Media',
                              subtitle: 'Add photos or videos',
                              onTap: () {
                                setState(() {
                                  _showFloatingPanel = false;
                                });
                                // Navigate to media upload
                                Navigator.of(context).push(
                                  MaterialPageRoute(
                                    builder: (_) => MultiR2MediaUploaderPage(
                                      currentUserId: widget.currentUserId,
                                      currentUserRole: widget.currentUserRole,
                                    ),
                                  ),
                                );
                              },
                            ),
                            const SizedBox(height: 12),
                            _buildQuickActionItem(
                              icon: Icons.refresh,
                              title: 'Refresh',
                              subtitle: 'Reload announcements',
                              onTap: () {
                                setState(() {
                                  _showFloatingPanel = false;
                                });
                                // Trigger refresh
                                setState(() {});
                              },
                            ),
                            const SizedBox(height: 12),
                            _buildQuickActionItem(
                              icon: Icons.settings,
                              title: 'Settings',
                              subtitle: 'View preferences',
                              onTap: () {
                                setState(() {
                                  _showFloatingPanel = false;
                                });
                                // Navigate to settings
                              },
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
        floatingActionButton: _showAnnouncementForm ? null : FloatingActionButton(
          onPressed: () {
            setState(() {
              _showFloatingPanel = !_showFloatingPanel;
            });
          },
          backgroundColor: Colors.blue[600],
          child: Icon(
            _showFloatingPanel ? Icons.close : Icons.add,
            color: Colors.white,
          ),
        ),
      ),
    );
  }

  Widget _buildQuickActionItem({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300]!),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                icon,
                color: Colors.blue[700],
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    subtitle,
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
            Icon(
              Icons.arrow_forward_ios,
              size: 16,
              color: Colors.grey[400],
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _removeReactionsOverlay();
    super.dispose();
  }
}

// Renders up to 4 thumbnails in a 2x2 grid with +N on the last tile when more,
// and shows a centered "Download all" overlay with progress.
class _R2MultiVideoGrid extends StatefulWidget {
  final List<Map<String, dynamic>> videos; // each: {url, thumbnailUrl, width, height, ...}
  final void Function(String url) onOpenVideo;
  final MediaTemplateStyle templateStyle;

  const _R2MultiVideoGrid({
    required this.videos, 
    required this.onOpenVideo,
    this.templateStyle = MediaTemplateStyle.school,
  });

  @override
  State<_R2MultiVideoGrid> createState() => _R2MultiVideoGridState();
}

class _R2MultiVideoGridState extends State<_R2MultiVideoGrid> with AutomaticKeepAliveClientMixin, TickerProviderStateMixin {
  @override
  bool get wantKeepAlive => true;
  bool _downloading = false;
  double _progress = 0.0; // 0..1 aggregate
  final Map<int, double> _perItem = {}; // index -> progress
  String? _r2AccountId;
  String? _r2AccessKeyId;
  String? _r2SecretAccessKey;
  String? _r2BucketName;
  
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  bool get _isComplete => _progress >= 1.0 - 1e-6;

  @override
  void initState() {
    super.initState();
    _loadR2Configuration();
    // Pre-mark any videos that are already downloaded locally so we don't re-download
    _preMarkCompletedItems();
    
    // Initialize pulse animation for NEW badge
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1800),
      vsync: this,
    );
    _pulseAnimation = Tween<double>(
      begin: 1.0,
      end: 1.1,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));
    _pulseController.repeat(reverse: true);
  }

  @override
  void dispose() {
    _pulseController.dispose();
    super.dispose();
  }

  Future<void> _loadR2Configuration() async {
    try {
      final doc = await FirebaseFirestore.instance.collection('app_config').doc('r2_settings').get();
      if (doc.exists) {
        final data = doc.data()!;
        setState(() {
          _r2AccountId = data['accountId'];
          _r2AccessKeyId = data['accessKeyId'];
          _r2SecretAccessKey = data['secretAccessKey'];
          _r2BucketName = data['bucketName'];
        });
      }
    } catch (_) {}
  }

  Future<String> _presign(String rawUrl) async {
    try {
      if (_r2AccountId == null || _r2AccessKeyId == null || _r2SecretAccessKey == null || _r2BucketName == null) {
        return rawUrl;
      }
      final uri = Uri.parse(rawUrl);
      final segs = uri.pathSegments;
      final objectKey = segs.join('/');
      final minio = Minio(
        endPoint: '${_r2AccountId}.r2.cloudflarestorage.com',
        accessKey: _r2AccessKeyId!,
        secretKey: _r2SecretAccessKey!,
        useSSL: true,
      );
      return await minio.presignedGetObject(_r2BucketName!, objectKey, expires: 3600);
    } catch (_) {
      return rawUrl;
    }
  }

  Future<void> _startDownloadAll() async {
    if (_downloading) return;
    setState(() {
      _downloading = true;
      // Keep any items we already know are completed from a previous session
      _recomputeAggregate();
    });

    final appDir = await getApplicationDocumentsDirectory();
    final videosDir = Directory('${appDir.path}/videos');
    final thumbnailsDir = Directory('${appDir.path}/thumbnails');
    if (!await videosDir.exists()) await videosDir.create(recursive: true);
    if (!await thumbnailsDir.exists()) await thumbnailsDir.create(recursive: true);

    for (int i = 0; i < widget.videos.length; i++) {
      final v = widget.videos[i];
      final url = (v['url'] as String?) ?? (v['message'] as String?) ?? '';
      final thumbnailUrl = (v['thumbnailUrl'] as String?) ?? ((v['meta'] as Map<String, dynamic>?)?['thumbnailUrl'] as String?);
      
      if (url.isEmpty) {
        _perItem[i] = 1.0; // skip
        _recomputeAggregate();
        continue;
      }
      
      // Skip if already completed
      if ((_perItem[i] ?? 0) >= 1.0 - 1e-6) {
        continue;
      }
      
      try {
        final uri = Uri.parse(url);
        final fileName = uri.pathSegments.isNotEmpty ? uri.pathSegments.last : 'video_${DateTime.now().millisecondsSinceEpoch}.mp4';
        final localPath = '${videosDir.path}/$fileName';
        
        // If file already exists locally, mark as done and persist mapping
        final existing = File(localPath);
        if (await existing.exists()) {
          setState(() {
            _perItem[i] = 1.0;
            _recomputeAggregate();
          });
          DownloadState.put(url, localPath);
          
          // Download thumbnail if available
          if (thumbnailUrl != null && thumbnailUrl.isNotEmpty) {
            await _downloadThumbnail(thumbnailUrl, thumbnailsDir);
          }
          
          continue;
        }
        
        // Download thumbnail first (if available)
        if (thumbnailUrl != null && thumbnailUrl.isNotEmpty) {
          await _downloadThumbnail(thumbnailUrl, thumbnailsDir);
        }
        
        final presigned = await _presign(url);

        await FastDownloadManager.downloadFileWithProgress(
          url: presigned,
          filePath: localPath,
          maxConnections: 4,
          chunkSize: 512 * 1024,
          onProgress: (p, downloaded, total, speed) {
            if (!mounted) return;
            setState(() {
              _perItem[i] = p;
              _recomputeAggregate();
            });
            if (p >= 1.0 - 1e-6) {
              // persist
              DownloadState.put(url, localPath);
            }
          },
        );
      } catch (_) {
        setState(() {
          _perItem[i] = 0.0; // failed; keep as 0 for aggregate
          _recomputeAggregate();
        });
      }
    }

    if (!mounted) return;
    setState(() => _downloading = false);
  }
  
  // Download thumbnail and store it locally
  Future<String?> _downloadThumbnail(String thumbnailUrl, Directory thumbnailsDir) async {
    try {
      // Check in memory cache first (faster than disk access)
      if (_R2PosterImageState._thumbnailPathCache.containsKey(thumbnailUrl)) {
        final cachedPath = _R2PosterImageState._thumbnailPathCache[thumbnailUrl]!;
        final thumbFile = File(cachedPath);
        if (await thumbFile.exists()) {
          return cachedPath;
        }
      }
      
      // Check if we already have this thumbnail stored locally
      final savedThumbnails = await DownloadState.loadThumbnails();
      if (savedThumbnails.containsKey(thumbnailUrl)) {
        final savedPath = savedThumbnails[thumbnailUrl]!;
        final thumbFile = File(savedPath);
        if (await thumbFile.exists()) {
          // Update the memory cache
          _R2PosterImageState._thumbnailPathCache[thumbnailUrl] = savedPath;
          return savedPath;
        }
      }
      
      // Extract filename from URL or create a unique one
      final uri = Uri.parse(thumbnailUrl);
      final fileName = uri.pathSegments.isNotEmpty ? 
          uri.pathSegments.last : 
          'thumb_${DateTime.now().millisecondsSinceEpoch}.jpg';
          
      final localPath = '${thumbnailsDir.path}/$fileName';
      
      // Download the thumbnail
      final presigned = await _presign(thumbnailUrl);
      
      final response = await http.get(Uri.parse(presigned));
      if (response.statusCode == 200) {
        final file = File(localPath);
        await file.writeAsBytes(response.bodyBytes);
        
        // Save the mapping in both persistent storage and memory cache
        await DownloadState.putThumbnail(thumbnailUrl, localPath);
        _R2PosterImageState._thumbnailPathCache[thumbnailUrl] = localPath;
        
        print('Downloaded thumbnail: $thumbnailUrl -> $localPath');
        return localPath;
      }
    } catch (e) {
      print('Error downloading thumbnail: $e');
    }
    return null;
  }

  // On mount, find which of this card's videos are already downloaded and mark them complete
  Future<void> _preMarkCompletedItems() async {
    try {
      final saved = await DownloadState.load();
      final appDir = await getApplicationDocumentsDirectory();
      final videosDir = Directory('${appDir.path}/videos');
      final updates = <int, double>{};
      for (int i = 0; i < widget.videos.length; i++) {
        final v = widget.videos[i];
        final url = (v['url'] as String?) ?? (v['message'] as String?) ?? '';
        if (url.isEmpty) continue;
        // 1) If persisted mapping exists and the file still exists, use it
        final mapped = saved[url];
        if (mapped != null) {
          final f = File(mapped);
          if (await f.exists()) {
            updates[i] = 1.0;
            continue;
          }
        }
        // 2) Fallback: derive by fileName under app documents/videos
        final fileName = Uri.tryParse(url)?.pathSegments.last;
        if (fileName != null && fileName.isNotEmpty) {
          final f = File('${videosDir.path}/$fileName');
          if (await f.exists()) {
            updates[i] = 1.0;
            // backfill mapping for consistency
            await DownloadState.put(url, f.path);
          }
        }
      }
      if (!mounted || updates.isEmpty) return;
      setState(() {
        _perItem.addAll(updates);
        _recomputeAggregate();
      });
    } catch (_) {}
  }

  void _recomputeAggregate() {
    if (_perItem.isEmpty) {
      _progress = 0.0;
      return;
    }
    final sum = _perItem.values.fold<double>(0.0, (a, b) => a + b);
    _progress = sum / (widget.videos.length);
  }

  // Get template colors based on style
  Map<String, dynamic> _getTemplateColors() {
    switch (widget.templateStyle) {
      case MediaTemplateStyle.business:
        return {
          'gradient': [const Color(0xFF1E293B), const Color(0xFF334155)],
          'accent': const Color(0xFF64748B),
          'text': Colors.white,
        };
      case MediaTemplateStyle.modern:
        return {
          'gradient': [const Color(0xFF8B5CF6), const Color(0xFFEC4899)],
          'accent': const Color(0xFFF472B6),
          'text': Colors.white,
        };
      case MediaTemplateStyle.school:
      default:
        return {
          'gradient': [const Color(0xFF8AD7FF), const Color(0xFFC6F7E6)],
          'accent': const Color(0xFF022039),
          'text': const Color(0xFF022039),
        };
    }
  }

  IconData _getTemplateIcon() {
    switch (widget.templateStyle) {
      case MediaTemplateStyle.business:
        return Icons.business_center;
      case MediaTemplateStyle.modern:
        return Icons.auto_awesome;
      case MediaTemplateStyle.school:
      default:
        return Icons.school;
    }
  }

  String _getTemplateTitle() {
    switch (widget.templateStyle) {
      case MediaTemplateStyle.business:
        return 'Business Media';
      case MediaTemplateStyle.modern:
        return 'Modern Media';
      case MediaTemplateStyle.school:
      default:
        return 'School Media';
    }
  }

  String _getTemplateLabel() {
    switch (widget.templateStyle) {
      case MediaTemplateStyle.business:
        return 'PROFESSIONAL';
      case MediaTemplateStyle.modern:
        return 'CREATIVE';
      case MediaTemplateStyle.school:
      default:
        return 'ACADEMIC';
    }
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    final items = widget.videos;
    final count = items.length;
    final show = items.take(4).toList();
    final extra = items.length - show.length;

    // Get template colors
    final templateColors = _getTemplateColors();
    final gradientColors = templateColors['gradient'] as List<Color>;

    return Container(
      width: 350,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Header - Profile style
          Container(
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [Color(0xFFE0F7FA), Color(0xFFF1F8E9)],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
              border: const Border(
                bottom: BorderSide(
                  color: Color(0xFFD6E4F0),
                  width: 2,
                ),
              ),
            ),
            padding: const EdgeInsets.all(14),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Container(
                      width: 38,
                      height: 38,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: const Color(0xFF4CAFEF),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 6,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Center(
                        child: Text(
                          _getTemplateEmoji(),
                          style: const TextStyle(
                            fontSize: 18,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Text(
                      _getTemplateTitle(),
                      style: const TextStyle(
                        fontFamily: 'Segoe UI',
                        fontWeight: FontWeight.w600,
                        fontSize: 15,
                        color: Color(0xFF2C3E50),
                      ),
                    ),
                  ],
                ),
                AnimatedBuilder(
                  animation: _pulseAnimation,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _pulseAnimation.value,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                        decoration: BoxDecoration(
                          color: const Color(0xFFFF4081),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Text(
                          'NEW',
                          style: TextStyle(
                            fontFamily: 'Segoe UI',
                            color: Colors.white,
                            fontSize: 11,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ],
            ),
          ),
          
          // Body - Media Grid (WhatsApp style layout)
          Container(
            padding: const EdgeInsets.all(14),
            child: Stack(
              children: [
                _buildWhatsAppStyleGrid(show, extra, count),
                // Download overlay
                if (!_isComplete)
                  Positioned.fill(
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.3),
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Center(
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            color: const Color(0xFF4CAFEF),
                            borderRadius: BorderRadius.circular(12),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.2),
                                blurRadius: 8,
                                offset: const Offset(0, 2),
                              ),
                            ],
                          ),
                          child: DownloadAllOverlay(
                            isDownloading: _downloading,
                            progress: _downloading ? _progress : null,
                            onPressed: () async {
                              if (_downloading) return;
                              await _startDownloadAll();
                            },
                            idleLabel: 'Download All',
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
          
          // Footer
          Container(
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [Color(0xFFF9FBE7), Color(0xFFFFFDE7)],
              ),
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(16),
                bottomRight: Radius.circular(16),
              ),
              border: const Border(
                top: BorderSide(
                  color: Color(0xFFEEEEEE),
                  width: 1,
                ),
              ),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    const Text(
                      'üìå',
                      style: TextStyle(fontSize: 12),
                    ),
                    const SizedBox(width: 4),
                    Text(
                      _downloading 
                          ? 'Downloading... ${(_progress * 100).toStringAsFixed(1)}%'
                          : _isComplete 
                              ? 'Downloaded ‚Ä¢ Ready'
                              : 'Posted by Admin',
                      style: const TextStyle(
                        fontFamily: 'Segoe UI',
                        fontSize: 12,
                        color: Color(0xFF444444),
                      ),
                    ),
                  ],
                ),
                Text(
                  '${DateTime.now().day} ${_getMonthName(DateTime.now().month)} ${DateTime.now().year}',
                  style: const TextStyle(
                    fontFamily: 'Segoe UI',
                    fontSize: 12,
                    color: Color(0xFF444444),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  String _getTemplateEmoji() {
    switch (widget.templateStyle) {
      case MediaTemplateStyle.business:
        return 'üíº';
      case MediaTemplateStyle.modern:
        return 'üé®';
      case MediaTemplateStyle.school:
      default:
        return 'üë©‚Äçüè´';
    }
  }

  String _getMonthName(int month) {
    const months = [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ];
    return months[month - 1];
  }

  Widget _buildWhatsAppStyleGrid(List<Map<String, dynamic>> show, int extra, int totalCount) {
    if (totalCount == 1) {
      // Single media - full container
      return Container(
        height: 250,
        child: _buildMediaTile(show[0], isLarge: true),
      );
    } else if (totalCount == 2) {
      // Two media - side by side like WhatsApp (horizontal row)
      return Container(
        height: 250,
        child: Row(
          children: [
            Expanded(child: _buildMediaTile(show[0])),
            const SizedBox(width: 8),
            Expanded(child: _buildMediaTile(show[1])),
          ],
        ),
      );
    } else if (totalCount == 3) {
      // Three media - two on top row, one below (WhatsApp style)
      return Container(
        height: 250,
        child: Column(
          children: [
            Expanded(
              child: Row(
                children: [
                  Expanded(child: _buildMediaTile(show[0])),
                  const SizedBox(width: 8),
                  Expanded(child: _buildMediaTile(show[1])),
                ],
              ),
            ),
            const SizedBox(height: 8),
            Expanded(child: _buildMediaTile(show[2])),
          ],
        ),
      );
    } else {
      // Four or more - 2x2 grid with count overlay on last tile
      return Container(
        height: 250,
        child: GridView.builder(
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8,
            mainAxisSpacing: 8,
          ),
          itemCount: 4, // Always show 4 tiles
          itemBuilder: (context, index) {
            if (index < show.length) {
              return _buildMediaTile(
                show[index], 
                showExtraCount: extra > 0 && index == 3,
                extraCount: extra,
              );
            }
            return Container(); // Empty container for missing items
          },
        ),
      );
    }
  }

  Widget _buildMediaTile(Map<String, dynamic> v, {bool isLarge = false, bool showExtraCount = false, int extraCount = 0}) {
    final poster = (v['thumbnailUrl'] as String?) ?? ((v['meta'] as Map<String, dynamic>?)?['thumbnailUrl'] as String?);
    final url = (v['url'] as String?) ?? '';
    final isImage = (v['type'] == 'r2-image');

    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: () async {
          if (_isComplete) {
            await _openCurrentDownloadsList();
          } else if (url.isNotEmpty) {
            widget.onOpenVideo(url);
          }
        },
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.08),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Stack(
              fit: StackFit.expand,
              children: [
                if (poster != null && poster.isNotEmpty)
                  _BuildBlurredThumbnail(
                    url: poster, 
                    fit: BoxFit.cover,
                    isDownloaded: _isComplete,
                    originalUrl: url,
                  )
                else
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.grey[200]!,
                          Colors.grey[100]!,
                        ],
                      ),
                    ),
                  ),
                // Media type indicator
                Positioned(
                  top: 8,
                  left: 8,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                    decoration: BoxDecoration(
                      color: isImage 
                          ? const Color(0xFF4CAF50).withOpacity(0.9)
                          : const Color(0xFFE91E63).withOpacity(0.9),
                      borderRadius: BorderRadius.circular(8),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 4,
                          offset: const Offset(0, 1),
                        ),
                      ],
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          isImage ? Icons.photo_rounded : Icons.videocam_rounded,
                          size: isLarge ? 14 : 10,
                          color: Colors.white,
                        ),
                        const SizedBox(width: 3),
                        Text(
                          isImage ? 'IMG' : 'VID',
                          style: TextStyle(
                            fontFamily: 'Segoe UI',
                            fontSize: isLarge ? 9 : 7,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                // Media buttons - for all media types
                Center(
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Download button (only for videos)
                      if (!isImage) ...[
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(6),
                            border: Border.all(
                              color: Colors.white.withOpacity(0.3),
                              width: 1,
                            ),
                          ),
                          child: Material(
                            color: Colors.transparent,
                            child: InkWell(
                              borderRadius: BorderRadius.circular(6),
                              onTap: () => _downloadVideo(url),
                              child: Padding(
                                padding: EdgeInsets.all(isLarge ? 8.0 : 6.0),
                                child: Icon(
                                  Icons.download_for_offline,
                                  size: isLarge ? 20 : 16,
                                  color: Colors.white,
                                  shadows: const [
                                    Shadow(
                                      offset: Offset(1, 1),
                                      blurRadius: 3,
                                      color: Colors.black45,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                        SizedBox(width: isLarge ? 10 : 8),
                      ],
                      // View button (for all media types)
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(6),
                          border: Border.all(
                            color: Colors.white.withOpacity(0.3),
                            width: 1,
                          ),
                        ),
                        child: Material(
                          color: Colors.transparent,
                          child: InkWell(
                            borderRadius: BorderRadius.circular(6),
                            onTap: () => _openMediaGallery(widget.videos.indexWhere((item) => item == v)),
                            child: Padding(
                              padding: EdgeInsets.all(isLarge ? 8.0 : 6.0),
                              child: Icon(
                                isImage ? Icons.visibility : Icons.play_arrow,
                                size: isLarge ? 20 : 16,
                                color: Colors.white,
                                shadows: const [
                                  Shadow(
                                    offset: Offset(1, 1),
                                    blurRadius: 3,
                                    color: Colors.black45,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                if (showExtraCount && extraCount > 0)
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.7),
                    ),
                    child: Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            '+$extraCount',
                            style: const TextStyle(
                              fontFamily: 'Segoe UI',
                              color: Colors.white,
                              fontSize: 22,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Text(
                            'more',
                            style: TextStyle(
                              fontFamily: 'Segoe UI',
                              color: Colors.white70,
                              fontSize: 11,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _openCurrentDownloadsList() async {
    // Load saved downloads and filter to current announcement's videos only.
    final map = await DownloadState.load();
    // Build entries for only downloaded items belonging to this card
    final items = <_DownloadedItem>[];
    for (final v in widget.videos) {
      final url = (v['url'] as String?) ?? (v['message'] as String?) ?? '';
      if (url.isEmpty) continue;
      final local = map[url];
      if (local == null) continue; // show only those downloaded
      final poster = (v['thumbnailUrl'] as String?) ?? ((v['meta'] as Map<String, dynamic>?)?['thumbnailUrl'] as String?);
      final name = Uri.tryParse(url)?.pathSegments.last ?? 'video.mp4';
      items.add(_DownloadedItem(url: url, localPath: local, name: name, poster: poster));
    }

    if (!mounted) return;
    if (items.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('No videos saved yet')));
      return;
    }

    await Navigator.of(context).push(
      MaterialPageRoute(
        builder: (_) => _R2DownloadedSetPage(items: items),
      ),
    );
  }

  Future<void> _downloadVideo(String url) async {
    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Video URL is missing')),
      );
      return;
    }

    try {
      // Show a simple snackbar to indicate download started
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Download started in background...')),
      );
      
      // For now, just trigger the existing onOpenVideo callback
      // which will handle the download logic
      widget.onOpenVideo(url);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to download: $e')),
        );
      }
    }
  }

  Future<void> _openMediaGallery(int initialIndex) async {
    try {
      await Navigator.of(context).push(
        MaterialPageRoute(
          builder: (ctx) => _MediaGalleryPage(
            mediaItems: widget.videos,
            initialIndex: initialIndex,
          ),
        ),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to open gallery: $e')),
        );
      }
    }
  } {
}

// Media Gallery Page for viewing all media items with navigation
class _MediaGalleryPage extends StatefulWidget {
  final List<Map<String, dynamic>> mediaItems;
  final int initialIndex;

  const _MediaGalleryPage({
    required this.mediaItems,
    required this.initialIndex,
  });

  @override
  State<_MediaGalleryPage> createState() => _MediaGalleryPageState();
}

class _MediaGalleryPageState extends State<_MediaGalleryPage> {
  late PageController _pageController;
  late int _currentIndex;

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.initialIndex;
    _pageController = PageController(initialPage: widget.initialIndex);
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black.withOpacity(0.5),
        title: Text(
          '${_currentIndex + 1} of ${widget.mediaItems.length}',
          style: const TextStyle(color: Colors.white),
        ),
        iconTheme: const IconThemeData(color: Colors.white),
        elevation: 0,
      ),
      body: Column(
        children: [
          // Main media viewer
          Expanded(
            child: PageView.builder(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentIndex = index;
                });
              },
              itemCount: widget.mediaItems.length,
              itemBuilder: (context, index) {
                final item = widget.mediaItems[index];
                final isImage = (item['type'] == 'r2-image');
                final url = (item['url'] as String?) ?? '';
                
                if (isImage) {
                  return _buildImageViewer(url);
                } else {
                  return _buildVideoViewer(item);
                }
              },
            ),
          ),
          // Thumbnail navigation bar
          Container(
            height: 80,
            color: Colors.black.withOpacity(0.8),
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: widget.mediaItems.length,
              itemBuilder: (context, index) {
                final item = widget.mediaItems[index];
                final isImage = (item['type'] == 'r2-image');
                final thumbnailUrl = (item['thumbnailUrl'] as String?) ?? 
                                  ((item['meta'] as Map<String, dynamic>?)?['thumbnailUrl'] as String?) ?? 
                                  (item['url'] as String?);
                final isSelected = index == _currentIndex;
                
                return GestureDetector(
                  onTap: () {
                    _pageController.animateToPage(
                      index,
                      duration: const Duration(milliseconds: 300),
                      curve: Curves.easeInOut,
                    );
                  },
                  child: Container(
                    width: 80,
                    margin: const EdgeInsets.all(4),
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: isSelected ? Colors.white : Colors.transparent,
                        width: 2,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(6),
                      child: Stack(
                        fit: StackFit.expand,
                        children: [
                          if (thumbnailUrl != null && thumbnailUrl.isNotEmpty)
                            Image.network(
                              thumbnailUrl,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) => Container(
                                color: Colors.grey[800],
                                child: Icon(
                                  isImage ? Icons.image : Icons.videocam,
                                  color: Colors.white54,
                                ),
                              ),
                            )
                          else
                            Container(
                              color: Colors.grey[800],
                              child: Icon(
                                isImage ? Icons.image : Icons.videocam,
                                color: Colors.white54,
                              ),
                            ),
                          if (!isImage)
                            const Center(
                              child: Icon(
                                Icons.play_circle_outline,
                                color: Colors.white,
                                size: 24,
                              ),
                            ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImageViewer(String url) {
    return InteractiveViewer(
      child: Center(
        child: url.isNotEmpty
            ? Image.network(
                url,
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) => const Center(
                  child: Icon(
                    Icons.broken_image,
                    color: Colors.white54,
                    size: 64,
                  ),
                ),
              )
            : const Center(
                child: Icon(
                  Icons.image_not_supported,
                  color: Colors.white54,
                  size: 64,
                ),
              ),
      ),
    );
  }

  Widget _buildVideoViewer(Map<String, dynamic> videoData) {
    return Center(
      child: _FullScreenR2VideoPage(
        videoId: '',
        videoData: videoData,
      ),
    );
  }
}

class _DownloadedItem {
  final String url;
  final String localPath;
  final String name;
  final String? poster;
  _DownloadedItem({required this.url, required this.localPath, required this.name, this.poster});
}

/// Full screen view of the downloaded videos for a single announcement.
/// Layout rules:
/// - 1 item: full-page tile with poster and central play button
/// - 2 items: two tiles split 50/50 vertically
/// - 3 items: collage: top row 2 tiles, bottom row 1 tile full width
/// - 4 or more: 2-column grid, scrollable
class _R2DownloadedSetPage extends StatelessWidget {
  final List<_DownloadedItem> items;
  const _R2DownloadedSetPage({required this.items});

  @override
  Widget build(BuildContext context) {
    final count = items.length;
    return Scaffold(
      appBar: AppBar(),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(2),
          child: _buildBody(context, count),
        ),
      ),
    );
  }

  Widget _buildBody(BuildContext context, int count) {
    if (count == 1) {
      return _fullTile(context, items[0]);
    }
    if (count == 2) {
      return Column(
        children: [
          Expanded(child: _fullTile(context, items[0])),
          const SizedBox(height: 2),
          Expanded(child: _fullTile(context, items[1])),
        ],
      );
    }
    if (count == 3) {
      return Column(
        children: [
          Expanded(
            child: Row(
              children: [
                Expanded(child: _fullTile(context, items[0])),
                const SizedBox(width: 2),
                Expanded(child: _fullTile(context, items[1])),
              ],
            ),
          ),
          const SizedBox(height: 2),
          Expanded(child: _fullTile(context, items[2])),
        ],
      );
    }
    // 4 or more: grid
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        mainAxisSpacing: 2,
        crossAxisSpacing: 2,
      ),
      itemCount: items.length,
      itemBuilder: (context, index) => _gridTile(context, items[index]),
    );
  }

  Widget _gridTile(BuildContext context, _DownloadedItem it) {
    return _posterTile(context, it);
  }

  Widget _fullTile(BuildContext context, _DownloadedItem it) {
    return _posterTile(context, it);
  }

  Widget _posterTile(BuildContext context, _DownloadedItem it) {
    return InkWell(
      onTap: () async => OpenFilex.open(it.localPath),
      child: Stack(
        fit: StackFit.expand,
        children: [
          if (it.poster != null && it.poster!.isNotEmpty)
            _R2PosterImage(url: it.poster!, fit: BoxFit.cover)
          else
            Container(color: Colors.grey[300]),
          const Center(
            child: Icon(Icons.play_circle_fill, size: 56, color: Colors.white70),
          ),
        ],
      ),
    );
  }
}

class _DownloadIcon extends StatelessWidget {
  final String url;
  final bool small;
  const _DownloadIcon({required this.url, this.small = false});

  @override
  Widget build(BuildContext context) {
    final state = context.findAncestorStateOfType<_AnnouncementsPageState>();
    final v = state?._downloadProgress[url];
    final st = state?._dlStatus[url];
    final size = small ? 20.0 : 18.0;
    if (v == null && st == null) {
      return Icon(Icons.download_rounded, size: size, color: small ? null : Colors.white);
    }
    return Stack(
      fit: StackFit.expand,
      children: [
        CircularProgressIndicator(
          strokeWidth: 2,
          value: v,
          valueColor: small ? null : const AlwaysStoppedAnimation<Color>(Colors.white),
        ),
        if (v != null)
          Center(
            child: Text('${(v * 100).round()}%', style: TextStyle(fontSize: small ? 8 : 8, color: small ? null : Colors.white, fontWeight: FontWeight.bold)),
          ),
        if (st == TaskStatus.paused)
          Center(child: Icon(Icons.pause, size: small ? 12 : 12, color: small ? null : Colors.white)),
      ],
    );
  }
}

class _InlineYouTubeDialog extends StatefulWidget {
  final String videoId;
  final String url;
  final bool isShorts;
  const _InlineYouTubeDialog({required this.videoId, required this.url, this.isShorts = false});

  @override
  State<_InlineYouTubeDialog> createState() => _InlineYouTubeDialogState();
}

class _FullScreenYouTubePage extends StatefulWidget {
  final String videoId;
  final String url;
  final bool isShorts;
  final double? aspect; // use original aspect for non-shorts when available
  const _FullScreenYouTubePage({required this.videoId, required this.url, this.isShorts = false, this.aspect});

  @override
  State<_FullScreenYouTubePage> createState() => _FullScreenYouTubePageState();
}

class _FullScreenYouTubePageState extends State<_FullScreenYouTubePage> {
  late YoutubePlayerController _controller;
  late bool _portraitLocked = widget.isShorts;

  @override
  void initState() {
    super.initState();
    _controller = YoutubePlayerController.fromVideoId(
      videoId: widget.videoId,
      autoPlay: true,
      params: const YoutubePlayerParams(
        showFullscreenButton: true,
        strictRelatedVideos: true,
      ),
    );
    if (widget.isShorts) {
      SystemChrome.setPreferredOrientations(const [DeviceOrientation.portraitUp]);
    } else {
      SystemChrome.setPreferredOrientations(const [
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
      ]);
    }
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
    if (!widget.isShorts) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        Future.delayed(const Duration(milliseconds: 300), () {
          try {
            (_controller as dynamic).enterFullScreen();
          } catch (_) {}
        });
      });
    }
  }

  @override
  void dispose() {
    _controller.close();
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
    SystemChrome.setPreferredOrientations(DeviceOrientation.values);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
  final pad = MediaQuery.of(context).padding;
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // Video layer: Shorts use a full-screen cover fit (like YouTube Shorts),
          // regular videos keep a centered 16:9 player.
          Positioned.fill(
            child: widget.isShorts
                ? ClipRect(
                    child: FittedBox(
                      fit: BoxFit.cover,
                      child: SizedBox(
                        width: 9,
                        height: 16,
                        child: YoutubePlayer(controller: _controller),
                      ),
                    ),
                  )
                : Center(
                    child: AspectRatio(
                      aspectRatio: (widget.aspect != null && widget.aspect! > 0) ? widget.aspect! : 16 / 9,
                      child: YoutubePlayer(controller: _controller),
                    ),
                  ),
          ),
          Positioned(
            top: pad.top + 8,
            left: 8,
            child: IconButton(
              icon: const Icon(Icons.close, color: Colors.white),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          Positioned(
            top: pad.top + 8,
            right: 8,
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: Icon(_portraitLocked ? Icons.screen_lock_rotation : Icons.screen_rotation, color: Colors.white),
                  tooltip: _portraitLocked ? 'Portrait locked' : 'Allow rotate',
                  onPressed: () {
                    setState(() => _portraitLocked = !_portraitLocked);
                    if (_portraitLocked) {
                      SystemChrome.setPreferredOrientations(const [DeviceOrientation.portraitUp]);
                    } else {
                      SystemChrome.setPreferredOrientations(const [
                        DeviceOrientation.portraitUp,
                        DeviceOrientation.portraitDown,
                        DeviceOrientation.landscapeLeft,
                        DeviceOrientation.landscapeRight,
                      ]);
                    }
                  },
                ),
                IconButton(
                  icon: const Icon(Icons.open_in_new, color: Colors.white),
                  onPressed: () async => launchUrl(Uri.parse(widget.url), mode: LaunchMode.externalApplication),
                ),
              ],
            ),
          ),
          Positioned(
            left: 0,
            right: 0,
            bottom: 0,
            child: IgnorePointer(child: SizedBox(height: pad.bottom)),
          ),
        ],
      ),
    );
  }
}

class _InlineYouTubeDialogState extends State<_InlineYouTubeDialog> {
  late final YoutubePlayerController _controller = YoutubePlayerController(
    params: const YoutubePlayerParams(
      showFullscreenButton: true,
      strictRelatedVideos: true,
    ),
  );

  @override
  void initState() {
    super.initState();
    _controller.loadVideoById(videoId: widget.videoId);
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      contentPadding: const EdgeInsets.all(0),
      content: AspectRatio(
        aspectRatio: widget.isShorts ? 9 / 16 : 16 / 9,
        child: YoutubePlayer(controller: _controller),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Close'),
        ),
        TextButton(
          onPressed: () async => launchUrl(Uri.parse(widget.url), mode: LaunchMode.externalApplication),
          child: const Text('Open in YouTube'),
        ),
      ],
    );
  }
}

class _FullScreenR2VideoPage extends StatefulWidget {
  final String videoId;
  final Map<String, dynamic> videoData;

  const _FullScreenR2VideoPage({
    required this.videoId,
    required this.videoData,
  });

  @override
  State<_FullScreenR2VideoPage> createState() => _FullScreenR2VideoPageState();
}

class _FullScreenR2VideoPageState extends State<_FullScreenR2VideoPage> {
  @override
  Widget build(BuildContext context) {
    final pad = MediaQuery.of(context).padding;
    
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: Center(
              child: R2VideoPlayer(
                videoId: widget.videoId,
                directUrl: widget.videoData['url'],
                showControls: true,
                autoPlay: true,
              ),
            ),
          ),
          Positioned(
            top: pad.top + 8,
            left: 8,
            child: IconButton(
              icon: const Icon(Icons.close, color: Colors.white),
              onPressed: () => Navigator.pop(context),
            ),
          ),
          Positioned(
            top: pad.top + 8,
            right: 8,
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (widget.videoData['url'] != null)
                  IconButton(
                    icon: const Icon(Icons.open_in_new, color: Colors.white),
                    onPressed: () async {
                      final url = widget.videoData['url'] as String;
                      final uri = Uri.parse(url);
                      await launchUrl(uri, mode: LaunchMode.externalApplication);
                    },
                  ),
              ],
            ),
          ),
          // Video info overlay
          Positioned(
            bottom: pad.bottom + 16,
            left: 16,
            right: 16,
            child: Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.7),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (widget.videoData['title'] != null)
                    Text(
                      widget.videoData['title'],
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  if (widget.videoData['description'] != null) ...[
                    const SizedBox(height: 4),
                    Text(
                      widget.videoData['description'],
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                      maxLines: 3,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                  if (widget.videoData['demo'] == true) ...[
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.orange.withOpacity(0.8),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Text(
                        'DEMO MODE',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
class _R2VideoThumbnail extends StatefulWidget {
  final Map<String, dynamic> videoData;
  final double width;
  final double height;
  final double? aspectRatio;
  final bool isShorts;
  final Future<void> Function(String url) onOpenExternally;

  const _R2VideoThumbnail({
    required this.videoData,
    required this.width,
    required this.height,
    this.aspectRatio,
    required this.isShorts,
    required this.onOpenExternally,
  });

  @override
  State<_R2VideoThumbnail> createState() => _R2VideoThumbnailState();
}

class _R2VideoThumbnailState extends State<_R2VideoThumbnail> {
  bool _isDownloading = false;
  double _downloadProgress = 0.0;
  String? _localFilePath;
  String? _videoSize;
  String? _posterUrl;

  // R2 credentials - loaded from Firebase
  String? _r2AccountId;
  String? _r2AccessKeyId;
  String? _r2SecretAccessKey;
  String? _r2BucketName;

  @override
  void initState() {
    super.initState();
    _loadR2Configuration();
    _checkIfVideoExists();
    _getVideoSize();
  _resolvePoster();
  }

  // Load R2 configuration from Firebase
  Future<void> _loadR2Configuration() async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection('app_config')
          .doc('r2_settings')
          .get();
      
      if (doc.exists) {
        final data = doc.data()!;
        _r2AccountId = data['accountId'];
        _r2AccessKeyId = data['accessKeyId'];
        _r2SecretAccessKey = data['secretAccessKey'];
        _r2BucketName = data['bucketName'];
        
        print('R2 Config loaded: Account=${_r2AccountId}, Bucket=${_r2BucketName}');
      } else {
        print('R2 configuration not found in Firebase');
      }
    } catch (e) {
      print('Failed to load R2 configuration: $e');
    }
  }

  Future<void> _checkIfVideoExists() async {
    // Try to get URL from multiple possible fields
    final videoUrl = widget.videoData['url'] as String? ?? 
                     widget.videoData['message'] as String? ?? 
                     '';
    if (videoUrl.isEmpty) return;

    // Check if video is already downloaded
    final appDir = await getApplicationDocumentsDirectory();
    final fileName = videoUrl.split('/').last;
    final localFile = File('${appDir.path}/videos/$fileName');
    
    if (await localFile.exists()) {
      setState(() {
        _localFilePath = localFile.path;
      });
    }
  }

  void _resolvePoster() {
    final thumb = (widget.videoData['thumbnailUrl'] as String?)
        ?? ((widget.videoData['meta'] as Map<String, dynamic>?)?['thumbnailUrl'] as String?);
    if (thumb != null && thumb.isNotEmpty) {
      setState(() => _posterUrl = thumb);
    }
  }

  Future<bool> _ensureSharedStorageAccess() async {
    if (!Platform.isAndroid) return true;
    // Prefer Android 13+ scoped media permission for videos
    try {
      final videosStatus = await Permission.videos.status;
      if (videosStatus.isGranted) return true;
      final videosReq = await Permission.videos.request();
      if (videosReq.isGranted) return true;
      if (videosReq.isDenied) {
        final retry = await Permission.videos.request();
        if (retry.isGranted) return true;
      }
      if (videosReq.isPermanentlyDenied) {
        var askAgain = false;
        await showDialog(
          context: context,
          barrierDismissible: false,
          builder: (ctx) => AlertDialog(
            title: const Text('Permission needed'),
            content: const Text('Please allow access to videos to save downloads to your device.'),
            actions: [
      TextButton(onPressed: () => Navigator.of(ctx).pop(), child: const Text('Stream without saving')),
              TextButton(
                onPressed: () { askAgain = true; Navigator.of(ctx).pop(); },
                child: const Text('Ask again'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(ctx).pop();
                  openAppSettings();
                },
                child: const Text('Open Settings'),
              ),
            ],
          ),
        );
        if (askAgain) {
          final retry = await Permission.videos.request();
          if (retry.isGranted) return true;
        }
        return false;
      }
    } catch (_) {}

    // Fallback for older Android versions
    final storageStatus = await Permission.storage.status;
    if (storageStatus.isGranted) return true;
    final storageReq = await Permission.storage.request();
    if (storageReq.isGranted) return true;
    if (storageReq.isDenied) {
      final retry = await Permission.storage.request();
      if (retry.isGranted) return true;
    }
    if (storageReq.isPermanentlyDenied) {
      var askAgain = false;
      await showDialog(
        context: context,
        barrierDismissible: false,
        builder: (ctx) => AlertDialog(
          title: const Text('Permission needed'),
          content: const Text('Storage permission is required to save downloads to your device.'),
          actions: [
      TextButton(onPressed: () => Navigator.of(ctx).pop(), child: const Text('Stream without saving')),
            TextButton(
              onPressed: () { askAgain = true; Navigator.of(ctx).pop(); },
              child: const Text('Ask again'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(ctx).pop();
                openAppSettings();
              },
              child: const Text('Open Settings'),
            ),
          ],
        ),
      );
      if (askAgain) {
        final retry = await Permission.storage.request();
        if (retry.isGranted) return true;
      }
      return false;
    }

    // Optional last resort for Android 11+
    try {
      final manageStatus = await Permission.manageExternalStorage.status;
      if (manageStatus.isGranted) return true;
      final manageReq = await Permission.manageExternalStorage.request();
      if (manageReq.isGranted) return true;
      if (manageReq.isDenied) {
        final retry = await Permission.manageExternalStorage.request();
        if (retry.isGranted) return true;
      }
      if (manageReq.isPermanentlyDenied) {
        var askAgain = false;
        await showDialog(
          context: context,
          barrierDismissible: false,
          builder: (ctx) => AlertDialog(
            title: const Text('Permission needed'),
            content: const Text('Allow file management to save downloads to your device.'),
            actions: [
      TextButton(onPressed: () => Navigator.of(ctx).pop(), child: const Text('Stream without saving')),
              TextButton(
                onPressed: () { askAgain = true; Navigator.of(ctx).pop(); },
                child: const Text('Ask again'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(ctx).pop();
                  openAppSettings();
                },
                child: const Text('Open Settings'),
              ),
            ],
          ),
        );
        if (askAgain) {
          final retry = await Permission.manageExternalStorage.request();
          if (retry.isGranted) return true;
        }
        return false;
      }
    } catch (_) {}

    return false;
  }

  Future<void> _getVideoSize() async {
    // Try to get URL from multiple possible fields
    final videoUrl = widget.videoData['url'] as String? ?? 
                     widget.videoData['message'] as String? ?? 
                     '';
    if (videoUrl.isEmpty) return;

    try {
      final response = await http.head(Uri.parse(videoUrl));
      final contentLength = response.headers['content-length'];
      if (contentLength != null) {
        final bytes = int.parse(contentLength);
        setState(() {
          _videoSize = _formatFileSize(bytes);
        });
      }
    } catch (e) {
      // Handle error silently
    }
  }

  String _formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    if (bytes < 1024 * 1024 * 1024) return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
  }

  Future<void> _downloadVideo() async {
    // Try to get URL from multiple possible fields
    final videoUrl = widget.videoData['url'] as String? ?? 
                     widget.videoData['message'] as String? ?? 
                     '';
    
    print('Download video - URL found: $videoUrl');
    print('Download video - videoData: ${widget.videoData}');
    
    if (videoUrl.isEmpty) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Video URL is missing')),
        );
      }
      return;
    }

    // Check if R2 credentials are loaded
    if (_r2AccountId == null || _r2AccessKeyId == null || _r2SecretAccessKey == null || _r2BucketName == null) {
      print('Download video - R2 credentials not loaded, retrying...');
      await _loadR2Configuration();
      
      if (_r2AccountId == null || _r2AccessKeyId == null || _r2SecretAccessKey == null || _r2BucketName == null) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('R2 configuration missing')),
          );
        }
        return;
      }
    }

    // Validate URL format
    Uri? uri;
    try {
      uri = Uri.parse(videoUrl);
      print('Download video - Parsed URI: $uri');
    } catch (e) {
      print('Download video - Invalid URL format: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Invalid video URL format: $e')),
        );
      }
      return;
    }

    setState(() {
      _isDownloading = true;
      _downloadProgress = 0.0;
    });

    try {
    // Request proper media/storage access so user sees the system dialog
      if (Platform.isAndroid) {
        final ok = await _ensureSharedStorageAccess();
        if (!ok) {
      // If not granted, offer streaming playback without downloading
      setState(() { _isDownloading = false; });
      await _playStreamWithoutDownload(videoUrl);
      return;
        }
      }

      final appDir = await getApplicationDocumentsDirectory();
      final videosDir = Directory('${appDir.path}/videos');
      if (!await videosDir.exists()) {
        await videosDir.create(recursive: true);
      }

      final fileName = uri.pathSegments.last;
      print('Download video - File name: $fileName');
      final localFile = File('${videosDir.path}/$fileName');

      // Create Minio client for authenticated R2 access
      final minio = Minio(
        endPoint: '${_r2AccountId}.r2.cloudflarestorage.com',
        accessKey: _r2AccessKeyId!,
        secretKey: _r2SecretAccessKey!,
        useSSL: true,
      );

      // Generate presigned URL for download (valid for 1 hour)
      // Extract the file path from the original URL to match R2 storage structure
      final pathSegments = uri.pathSegments;
      final objectKey = pathSegments.join('/'); // This will be "videos/filename.mp4"
      
      final presignedUrl = await minio.presignedGetObject(
        _r2BucketName!,
        objectKey,
        expires: 3600, // 1 hour
      );
      
      print('Download video - Using presigned URL: $presignedUrl');

      // Use WhatsApp-style fast parallel download
      await FastDownloadManager.downloadFileWithProgress(
        url: presignedUrl,
        filePath: localFile.path,
        maxConnections: 4, // 4 parallel connections like WhatsApp
        chunkSize: 512 * 1024, // 512KB chunks for mobile optimization
        onProgress: (progress, downloadedBytes, totalBytes, speed) {
          if (mounted) {
            setState(() {
              _downloadProgress = progress;
            });
            
            print('FastDownload: ${(progress * 100).toInt()}% '
                  '(${FastDownloadManager.formatBytes(downloadedBytes)}/'
                  '${FastDownloadManager.formatBytes(totalBytes)}) at $speed');
          }
        },
      );
      
      setState(() {
        _isDownloading = false;
        _localFilePath = localFile.path;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Video downloaded successfully with parallel connections!')),
        );
      }
      
    } catch (e) {
      setState(() {
        _isDownloading = false;
      });
      
      print('Download video - Error: $e');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Download failed: $e'),
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }

  Future<void> _playVideo() async {
    if (_localFilePath != null) {
      await OpenFilex.open(_localFilePath!);
    }
  }

  Future<void> _playStreamWithoutDownload(String videoUrl) async {
    // Show dialog asking user how they want to view the video
    final result = await showDialog<String>(
      context: context,
      barrierDismissible: true,
      builder: (ctx) => AlertDialog(
        title: const Text('Play Video'),
        content: const Text('How would you like to watch this video?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('stream'),
            child: const Text('Stream Online'),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('external'),
            child: const Text('Open in External App'),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('cancel'),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );

    if (result == null || result == 'cancel') return;

    try {
      if (result == 'stream') {
        // Stream within the app using the full-screen player
        await Navigator.of(context).push(
          MaterialPageRoute(
            builder: (ctx) => _FullScreenR2VideoPage(
              videoId: '',
              videoData: {'url': videoUrl},
            ),
          ),
        );
      } else if (result == 'external') {
        // Open directly with external app (system video player)
        await widget.onOpenExternally(videoUrl);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to play video: $e')),
        );
      }
    }
  }

  Future<void> _showPlayOptions() async {
    // Get video URL
    final videoUrl = widget.videoData['url'] as String? ?? 
                     widget.videoData['message'] as String? ?? 
                     '';
    
    if (videoUrl.isEmpty) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Video URL is missing')),
        );
      }
      return;
    }

    // Show dialog with download or stream options
    final result = await showDialog<String>(
      context: context,
      barrierDismissible: true,
      builder: (ctx) => AlertDialog(
        title: const Text('Watch Video'),
        content: const Text('Choose how you\'d like to watch this video:'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('download'),
            child: const Text('Download & Play'),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('stream'),
            child: const Text('Stream Online'),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('external'),
            child: const Text('Open in External App'),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop('cancel'),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );

    if (result == null || result == 'cancel') return;

    try {
      if (result == 'download') {
        // Traditional download flow
        await _downloadVideo();
      } else if (result == 'stream') {
        // Stream within the app using the full-screen player
        await Navigator.of(context).push(
          MaterialPageRoute(
            builder: (ctx) => _FullScreenR2VideoPage(
              videoId: '',
              videoData: {'url': videoUrl},
            ),
          ),
        );
      } else if (result == 'external') {
        // Open directly with external app (system video player)
        await widget.onOpenExternally(videoUrl);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to play video: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final title = widget.videoData['title'] as String? ?? 'Video';
    final description = widget.videoData['description'] as String? ?? '';
    final isDemo = widget.videoData['demo'] == true;
    
    return InkWell(
      onTap: _localFilePath != null 
        ? _playVideo 
        : null, // No action when not downloaded - buttons handle their own actions
      borderRadius: BorderRadius.circular(8),
      child: Container(
        margin: const EdgeInsets.only(top: 6, bottom: 4),
        decoration: BoxDecoration(
          color: Colors.black12,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey.withOpacity(0.3)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            // Video thumbnail with download/play button
            AspectRatio(
              aspectRatio: widget.aspectRatio ?? (widget.isShorts ? 9 / 16 : 16 / 9),
              child: ClipRRect(
                borderRadius: const BorderRadius.vertical(top: Radius.circular(8)),
                child: Stack(
                  children: [
                    // Poster image or fallback placeholder
                    Positioned.fill(
            child: _posterUrl != null && _posterUrl!.isNotEmpty
              ? _R2PosterImage(url: _posterUrl!, fit: BoxFit.cover)
                          : Container(
                              color: Colors.grey[300],
                              child: const Center(
                                child: Icon(
                                  Icons.videocam_outlined,
                                  size: 48,
                                  color: Colors.white70,
                                ),
                              ),
                            ),
                    ),
                    // Overlay with download/play button
                    Positioned.fill(
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Colors.transparent,
                              Colors.black.withOpacity(0.3),
                            ],
                          ),
                        ),
                        child: Center(
                          child: _buildActionButton(),
                        ),
                      ),
                    ),
                    // Video size indicator (top right)
                    if (_videoSize != null && _localFilePath == null)
                      Positioned(
                        top: 8,
                        right: 8,
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.black.withOpacity(0.7),
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Text(
                            _videoSize!,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    // Demo mode indicator
                    if (isDemo)
                      Positioned(
                        top: 8,
                        left: 8,
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.orange.withOpacity(0.9),
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: const Text(
                            'DEMO',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            // Video info
            if (title.isNotEmpty || description.isNotEmpty)
              Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (title.isNotEmpty)
                      Text(
                        title,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    if (description.isNotEmpty) ...[
                      const SizedBox(height: 4),
                      Text(
                        description,
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 12,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButton() {
    if (_isDownloading) {
      // Show progress circle with percentage
      return Stack(
        alignment: Alignment.center,
        children: [
          SizedBox(
            width: 60,
            height: 60,
            child: CircularProgressIndicator(
              value: _downloadProgress,
              strokeWidth: 4,
              backgroundColor: Colors.white.withOpacity(0.3),
              valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
            ),
          ),
          Text(
            '${(_downloadProgress * 100).toInt()}%',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      );
    } else if (_localFilePath != null) {
      // Show play button (video downloaded)
      return const Icon(
        Icons.play_circle_fill,
        size: 60,
        color: Colors.white,
        shadows: [
          Shadow(
            offset: Offset(1, 1),
            blurRadius: 3,
            color: Colors.black45,
          ),
        ],
      );
    } else {
      // Show download and view online buttons (video not downloaded)
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Download button
          Container(
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: Colors.white.withOpacity(0.3),
                width: 1,
              ),
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(8),
                onTap: _downloadVideo,
                child: const Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Icon(
                    Icons.download_for_offline,
                    size: 24,
                    color: Colors.white,
                    shadows: [
                      Shadow(
                        offset: Offset(1, 1),
                        blurRadius: 3,
                        color: Colors.black45,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          // View online button
          Container(
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: Colors.white.withOpacity(0.3),
                width: 1,
              ),
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(8),
                onTap: () => _streamOnline(),
                child: const Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Icon(
                    Icons.play_arrow,
                    size: 24,
                    color: Colors.white,
                    shadows: [
                      Shadow(
                        offset: Offset(1, 1),
                        blurRadius: 3,
                        color: Colors.black45,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      );
    }
  }

  Future<void> _streamOnline() async {
    // Get video URL
    final videoUrl = widget.videoData['url'] as String? ?? 
                     widget.videoData['message'] as String? ?? 
                     '';
    
    if (videoUrl.isEmpty) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Video URL is missing')),
        );
      }
      return;
    }

    try {
      // Stream within the app using the full-screen player
      await Navigator.of(context).push(
        MaterialPageRoute(
          builder: (ctx) => _FullScreenR2VideoPage(
            videoId: '',
            videoData: {'url': videoUrl},
          ),
        ),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to stream video: $e')),
        );
      }
    }
  }

}

class _FullScreenR2StreamPage extends StatefulWidget {
  final String directUrl;
  const _FullScreenR2StreamPage({required this.directUrl});

  @override
  State<_FullScreenR2StreamPage> createState() => _FullScreenR2StreamPageState();
}

class _FullScreenR2StreamPageState extends State<_FullScreenR2StreamPage> {
  @override
  Widget build(BuildContext context) {
    final pad = MediaQuery.of(context).padding;
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: R2VideoPlayer(
              videoId: '',
              directUrl: widget.directUrl,
              showControls: true,
              autoPlay: true,
              fit: BoxFit.cover, // truly fullscreen with cropping when needed
            ),
          ),
          Positioned(
            top: pad.top + 8,
            left: 8,
            child: IconButton(
              icon: const Icon(Icons.close, color: Colors.white),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ),
          Positioned(
            left: 0,
            right: 0,
            bottom: 0,
            child: IgnorePointer(child: SizedBox(height: pad.bottom)),
          ),
        ],
      ),
    );
  }
}

// New component for handling blurred thumbnails and local high-quality images
class _BuildBlurredThumbnail extends StatefulWidget {
  final String url;
  final BoxFit fit;
  final bool isDownloaded;
  final String originalUrl;

  const _BuildBlurredThumbnail({
    required this.url,
    this.fit = BoxFit.cover,
    required this.isDownloaded,
    required this.originalUrl,
  });

  @override
  State<_BuildBlurredThumbnail> createState() => _BuildBlurredThumbnailState();
}

class _BuildBlurredThumbnailState extends State<_BuildBlurredThumbnail> {
  String? _localThumbnailPath;
  bool _isLoadingLocal = false;

  @override
  void initState() {
    super.initState();
    if (widget.isDownloaded) {
      _loadLocalThumbnail();
    }
  }

  @override
  void didUpdateWidget(_BuildBlurredThumbnail oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isDownloaded && !oldWidget.isDownloaded) {
      _loadLocalThumbnail();
    }
  }

  Future<void> _loadLocalThumbnail() async {
    if (_isLoadingLocal) return;
    setState(() => _isLoadingLocal = true);

    try {
      // Check if we have a local high-quality thumbnail
      final thumbnails = await DownloadState.loadThumbnails();
      final localPath = thumbnails[widget.url];
      
      if (localPath != null && await File(localPath).exists()) {
        if (mounted) {
          setState(() {
            _localThumbnailPath = localPath;
            _isLoadingLocal = false;
          });
        }
        return;
      }

      // If no local thumbnail, try to find downloaded file and generate one
      final downloads = await DownloadState.load();
      final downloadedPath = downloads[widget.originalUrl];
      
      if (downloadedPath != null && await File(downloadedPath).exists()) {
        // For now, use the existing thumbnail but mark as downloaded
        if (mounted) {
          setState(() => _isLoadingLocal = false);
        }
      }
    } catch (e) {
      print('Error loading local thumbnail: $e');
      if (mounted) {
        setState(() => _isLoadingLocal = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // If we have a local high-quality thumbnail, use it
    if (_localThumbnailPath != null) {
      return Image.file(
        File(_localThumbnailPath!),
        fit: widget.fit,
        errorBuilder: (context, error, stackTrace) {
          return _buildBlurredNetworkImage();
        },
      );
    }

    // Otherwise show blurred network thumbnail
    return _buildBlurredNetworkImage();
  }

  Widget _buildBlurredNetworkImage() {
    return ImageFiltered(
      imageFilter: widget.isDownloaded 
          ? ImageFilter.blur(sigmaX: 0, sigmaY: 0) // No blur when downloaded
          : ImageFilter.blur(sigmaX: 5.0, sigmaY: 5.0), // Very blurred when not downloaded
      child: _R2PosterImage(
        url: widget.url, 
        fit: widget.fit,
      ),
    );
  }
}

class _R2PosterImage extends StatefulWidget {
  final String url;
  final BoxFit fit;
  const _R2PosterImage({required this.url, this.fit = BoxFit.cover});

  @override
  State<_R2PosterImage> createState() => _R2PosterImageState();
}

class _R2PosterImageState extends State<_R2PosterImage> {
  String? _resolvedUrl;
  String? _localPath;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _checkLocalThumbnail();
  }
  
  Future<void> _checkLocalThumbnail() async {
    // First check if we have a local copy of this thumbnail
    try {
      // Store thumbnail URL to check against in a persistent cache
      final thumbnailUrl = widget.url;
      
      // Check in memory cache first for better performance
      final cachedThumbnailsPaths = await _getLocalThumbnailsCache();
      final localPath = cachedThumbnailsPaths[thumbnailUrl];
      
      if (localPath != null) {
        final file = File(localPath);
        if (await file.exists()) {
          if (mounted) {
            setState(() {
              _localPath = localPath;
              _isLoading = false;
            });
            print('Using cached thumbnail: $localPath');
            return;
          }
        }
      }
      
      // If not in memory, check the persisted thumbnails
      final thumbnails = await DownloadState.loadThumbnails();
      final persistedPath = thumbnails[thumbnailUrl];
      
      if (persistedPath != null) {
        final file = File(persistedPath);
        if (await file.exists()) {
          if (mounted) {
            // Update the memory cache
            _updateLocalThumbnailCache(thumbnailUrl, persistedPath);
            
            setState(() {
              _localPath = persistedPath;
              _isLoading = false;
            });
            print('Using persisted thumbnail: $persistedPath');
            return;
          }
        }
      }
    } catch (e) {
      print('Error checking local thumbnail: $e');
    }
    
    // If no local copy, proceed with presigning
    _presignIfNeeded();
  }
  
  // In-memory cache for thumbnail paths to avoid frequent disk access
  static final Map<String, String> _thumbnailPathCache = {};
  
  // Get the in-memory cache for thumbnails
  Future<Map<String, String>> _getLocalThumbnailsCache() async {
    return _thumbnailPathCache;
  }
  
  // Update the in-memory cache for thumbnails
  void _updateLocalThumbnailCache(String url, String path) {
    _thumbnailPathCache[url] = path;
  }

  Future<void> _presignIfNeeded() async {
    final raw = widget.url;
    if (raw.contains('X-Amz-Signature') || raw.contains('X-Amz-Algorithm')) {
      setState(() { 
        _resolvedUrl = raw;
        _isLoading = false;
      });
      return;
    }
    Uri? uri;
    try { uri = Uri.parse(raw); } catch (_) {}
    if (uri == null) { 
      setState(() { 
        _resolvedUrl = raw;
        _isLoading = false;
      });
      return;
    }
    if (!uri.host.endsWith('.r2.cloudflarestorage.com')) {
      setState(() { 
        _resolvedUrl = raw;
        _isLoading = false;
      });
      return;
    }
    try {
      final doc = await FirebaseFirestore.instance.collection('app_config').doc('r2_settings').get();
      if (!doc.exists) { 
        setState(() { 
          _resolvedUrl = raw;
          _isLoading = false;
        });
        return;
      }
      final data = doc.data()!;
      final accountId = data['accountId'] as String?;
      final accessKeyId = data['accessKeyId'] as String?;
      final secretKey = data['secretAccessKey'] as String?;
      final bucket = data['bucketName'] as String?;
      if ([accountId, accessKeyId, secretKey, bucket].any((e) => e == null || (e as String).isEmpty)) {
        setState(() {
          _resolvedUrl = raw;
          _isLoading = false;
        });
        return;
      }
      final segs = uri.pathSegments;
      String objectKey;
      if (segs.isNotEmpty && segs.first == bucket) {
        objectKey = segs.skip(1).join('/');
      } else {
        objectKey = segs.join('/');
      }
      final minio = Minio(
        endPoint: '$accountId.r2.cloudflarestorage.com',
        accessKey: accessKeyId!,
        secretKey: secretKey!,
        useSSL: true,
      );
      final signed = await minio.presignedGetObject(bucket!, objectKey, expires: 600);
      if (mounted) {
        setState(() {
          _resolvedUrl = signed;
          _isLoading = false;
        });
      }
    } catch (_) {
      if (mounted) {
        setState(() {
          _resolvedUrl = raw;
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // If we have a local file, use it
    if (_localPath != null) {
      return Image.file(
        File(_localPath!), 
        fit: widget.fit,
        cacheHeight: 300, // Cache the image in memory for better performance
        cacheWidth: 300,
        errorBuilder: (c, e, s) {
          // If local file fails, fall back to network but don't trigger presign right away
          print('Error loading local thumbnail: $e');
          return Container(
            color: Colors.grey[300],
            child: _resolvedUrl != null ? Image.network(
              _resolvedUrl!,
              fit: widget.fit,
              errorBuilder: (c, e, s) => Container(color: Colors.grey[300]),
            ) : null,
          );
        }
      );
    }
    
    // If still loading or no URL available yet, show placeholder
    if (_isLoading || _resolvedUrl == null) {
      return Container(color: Colors.grey[300]);
    }
    
    // Otherwise use network image with caching
    return Image.network(
      _resolvedUrl!, 
      fit: widget.fit,
      cacheHeight: 300, // Cache the image in memory for better performance
      cacheWidth: 300,
      errorBuilder: (c, e, s) => Container(color: Colors.grey[300]),
      loadingBuilder: (context, child, loadingProgress) {
        if (loadingProgress == null) {
          return child;
        } else {
          // Show loading indicator
          return Container(
            color: Colors.grey[300],
            child: Center(
              child: CircularProgressIndicator(
                value: loadingProgress.expectedTotalBytes != null
                    ? loadingProgress.cumulativeBytesLoaded / 
                      (loadingProgress.expectedTotalBytes ?? 1)
                    : null,
              ),
            ),
          );
        }
      },
    );
  }
}
